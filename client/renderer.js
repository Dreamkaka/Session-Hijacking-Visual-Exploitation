const { ipcRenderer } = require('electron');
const UAParser = require('ua-parser-js');
const ip = localStorage.getItem('ip');
const protocol = localStorage.getItem('protocol');
const token = localStorage.getItem('token');
const serverPort = localStorage.getItem('serverPort');
const proxyPort = localStorage.getItem('proxyPort');

const sessionsTable = document.getElementById('sessions-table');
const tbody = sessionsTable.getElementsByTagName('tbody')[0];
let isUpdating = false;


document.getElementById('logout-button').addEventListener('click', () => {
  localStorage.removeItem('token');
  localStorage.removeItem('ip');
  localStorage.removeItem('protocol');
  localStorage.removeItem('serverPort');
  localStorage.removeItem('proxyPort');
  window.location.href = 'login.html';
});


document.getElementById('view-payloads').addEventListener('click', () => {
  window.location.href = 'payloads.html';
});

document.getElementById('certificateDownload').addEventListener('click', () => {
  const url = protocol + '://' + ip + ':' + serverPort + '/certificate/download';
  fetch(url, {
    headers: { 'shve-authentication': token },
  })
    .then((response) => response.blob())
    .then((blob) => {
      const objectUrl = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = objectUrl;
      link.download = 'cert.pem';
      document.body.appendChild(link); 
      link.click();
      document.body.removeChild(link); 
    })
    .catch((error) => {
      console.error('Hubo un error al realizar la solicitud', error);
    });
});


function openInteractiveWindow(sessionID) {
  ipcRenderer.send('open-interactive-window', sessionID,  ip, proxyPort, serverPort, token);
}

function openVisualWindow(sessionID) {
  ipcRenderer.send('open-visual-window', sessionID, ip, proxyPort, serverPort, token);
}

async function updateSessionsTable() {
  if (isUpdating) {
    return;
  }

  isUpdating = true;
  document.getElementById('refresh-sessions').disabled = true;

  try {
    const response = await fetch(`${protocol}://${ip}:${serverPort}/sessions/list`, {
      headers: { 'shve-authentication': token }
    });

    const clients = await response.json();
    tbody.innerHTML = '';

    if (clients) {
      for (const client of clients) {
        const ipResponse = await fetch(`https://ipapi.co/${client.ip}/json/`);
        const ipData = await ipResponse.json();

        let countryCode = ipData.country ? ipData.country.toLowerCase() : "un";
        let countryName = ipData.country_name ? ipData.country_name : "Unknown Country";

        const parser = new UAParser(client.userAgent);
        const browserInfo = parser.getBrowser();
        const osInfo = parser.getOS();

        const newRow = tbody.insertRow();
        newRow.innerHTML = `
        <td>${client.id}</td>
        <td>
          <div class="icon-wrapper">
            <img src="assets/icons/${osInfo.name.replace(/\s+/g, '').toLowerCase()}-logo.svg" class="os-icon">
            <div class="tooltip">${osInfo.name}: ${osInfo.version}</div>
          </div>
          <div class="icon-wrapper">
            <img src="assets/icons/${browserInfo.name.replace(/\s+/g, '').toLowerCase()}-logo.svg" class="browser-icon">
            <div class="tooltip">${browserInfo.name}: ${browserInfo.version}</div>
          </div>
        </td>
        <td>
          <span class="flag-icon flag-icon-${countryCode}"></span>
          ${countryName}
        </td>
        <td>${client.ip}</td>
        <td>
          <button onclick="openVisualWindow('${client.id}', '${ip}', '${proxyPort}', '${serverPort}')">Visual mode</button>
          <button onclick="openInteractiveWindow('${client.id}', '${ip}', '${proxyPort}', '${serverPort}')">Interactive mode</button>
        </td>
      `;
      }
    }
  } catch (error) {
    console.error("Error fetching sessions data:", error);
  } finally {
    isUpdating = false;
    document.getElementById('refresh-sessions').disabled = false;
  }
}

document.getElementById('refresh-sessions').addEventListener('click', updateSessionsTable);
updateSessionsTable();