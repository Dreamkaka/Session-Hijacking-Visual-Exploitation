const { ipcRenderer } = require('electron');
const protocol = localStorage.getItem('protocol');
const ip = localStorage.getItem('ip');
const token = localStorage.getItem('token');
const serverPort = localStorage.getItem('serverPort');

document.getElementById('back-button').addEventListener('click', () => {
  window.location.href = 'index.html';
});

document.getElementById('logout-button').addEventListener('click', () => {
  localStorage.removeItem('token');
  localStorage.removeItem('ip');
  localStorage.removeItem('protocol');
  localStorage.removeItem('serverPort');
  window.location.href = 'login.html';
});

async function updateFilesList() {
    document.getElementById('refresh-file-list').disabled = true;
  
    try {
      const response = await fetch(`${protocol}://${ip}:${serverPort}/files/list`, {
        headers: { 'shve-authentication': token },
      });
  
      const files = await response.json();
      const filesContainer = document.getElementById('files-scroll-container');
      filesContainer.innerHTML = ''; 
      filesContainer.style.display = 'flex';
      filesContainer.style.flexWrap = 'wrap'; 
      filesContainer.style.gap = '20px';
  
      files.forEach(file => {
        const fileElement = document.createElement('div');
        fileElement.style.margin = '10px';
        fileElement.style.display = 'flex';
        fileElement.style.flexDirection = 'column'; 
        fileElement.style.alignItems = 'center'; 

        const deleteButton = document.createElement('button');
        deleteButton.innerText = 'Remove';
        deleteButton.style.marginTop = '10px';

        const parts = file.split('-');
        const uuid = parts.slice(0, 5).join('-'); 
        const displayFileName = parts.slice(5).join('-'); 
        const fileType = displayFileName.split('.').pop(); 
  
        let icon;
        if (fileType.startsWith('p')) {
          icon = 'assets/icons/p-icon.svg';
        } else if (fileType.startsWith('d')) {
          icon = 'assets/icons/d-icon.svg';
        } else if (fileType.startsWith('x')) {
          icon = 'assets/icons/x-icon.svg';
        } else {
          icon = 'assets/doyensec-logo.svg';
        }
  
        fileElement.innerHTML = `
        <img src="${icon}" alt="File Type" class="file-icon" style="display: block; cursor: pointer;">
        <span class="file-name" style="cursor: pointer;">${displayFileName}</span>
      `;

        fileElement.style.position = 'relative';
  
        fileElement.addEventListener('click', async () => {
            try {
                const downloadResponse = await fetch(`${protocol}://${ip}:${serverPort}/files/download/${uuid}`, {
                    headers: { 'shve-authentication': token },
                });
                if (downloadResponse.ok) {
                    const blob = await downloadResponse.blob();
                    const url = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = displayFileName;
                    document.body.appendChild(a);
                    a.click();
                    a.remove();
                } else {
                    console.error('Error downloading the file.');
                }
            } catch (error) {
                console.error('Error downloading the file.', error);
            }
        });

        deleteButton.addEventListener('click', async (e) => {
            e.stopPropagation();
            try {
                const deleteResponse = await fetch(`${protocol}://${ip}:${serverPort}/files/delete/${uuid}`, {
                    method: 'DELETE',
                    headers: { 'shve-authentication': token },
                });
                if (deleteResponse.ok) {
                    fileElement.remove();
                    console.log('File successfully deleted.');
                } else {
                    console.error('Error deleting the file.');
                }
            } catch (error) {
                console.error('Error deleting the file.', error);
            }
        });

        fileElement.appendChild(deleteButton);

        filesContainer.appendChild(fileElement);
    });

  } catch (error) {
    console.error('Error updating the files.', error);
  } finally {
    document.getElementById('refresh-file-list').disabled = false;
  }
}

document.getElementById('refresh-file-list').addEventListener('click', updateFilesList);

updateFilesList();